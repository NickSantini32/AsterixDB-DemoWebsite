

drop dataverse csv if exists;
create dataverse csv;
use csv;

create type csv_type as {
	id:uuid,
    DR_NO: int32,
    Date_Rptd: string,
    Date_OCC: string,
    Time_OCC: string,
    Area: string,
    Area_Name: string,
    Rpt_Dist_No: int32,
    Part_12: string,
    Crm_Cd: string,
    Crm_Cd_Desc: string,
    Mocodes: string,
    Vict_Age: int32,
    Vict_Sex: string,
    Vict_Descent: string,
    Premis_Cd: string,
    Premis_Desc: string,
    Weapon_Used_Cd: string,
    Weapon_Desc: string,
    Status: string,
    Status_Desc: string,
    Crm_Cd_1: string,
    Crm_Cd_2: string,
    Crm_Cd_3: string,
    Crm_Cd_4: string,
    LOCATION: string,
    Cross_Street: string,
    lat: double,
    long: double
};

create dataset csv_set (csv_type) primary key id autogenerated;


  load dataset csv_set using localfs
      (("path"="127.0.0.1:///Users/nicholassantini/Downloads/crimeData.csv"),
      ("input-format"="text-input-format"),
      ("format"="delimited-text"),
      ("delimiter"=","),
      ("NULL"=""));


 SELECT count(*)
     FROM csv_set csv_type

---------------------------------------------------------------

drop dataverse csv if exists;
create dataverse csv;
use csv;

create type csv_ziptype as {
	id:uuid,
  g: geometry
};

create dataset csv_zipset (csv_ziptype) primary key id autogenerated;


load dataset csv_zipset using localfs
   (("path"="127.0.0.1:///Users/nicholassantini/Downloads/OSM2015_postal_codes.json"),
   ("format"="adm"));


 SELECT *
     FROM csv_zipset csv_ziptype

-------------------------------------------------------------------------
use csv;

select sett.lat, sett.long, zip.g
from csv_set as sett
right join csv_zipset as zip
on st_contains(zip.g, st_make_point(sett.lat, sett.long));
